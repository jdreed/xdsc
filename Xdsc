*loggingOn:	True
*logfile:	/afs/athena.mit.edu/user/s/sao/scores/xdsc.log
*BitmapFilePath:  /usr/athena/lib/X11/bitmaps:/usr/lib/X11/bitmaps:/usr/include/X11/bitmaps

*font:					fixed

*pane.refigureMode			True

*pane.topbox.borderWidth:		0
*pane.topbox.help.label:		HELP
*pane.topbox.quit.label:		QUIT
*pane.topbox.showGrip:			False
*pane.topbox.allowResize:		False

*pane.toptext.min:			30
*pane.toptext.height:			150
*pane.toptext.scrollVertical:		whenNeeded
*pane.toptext.cursor:			left_ptr
*pane.toptext.translations: #override \
<Btn1Down>:     TriggerFocusMove(Here) DispatchClick() \n\
<Btn1Motion>:   extend-adjust() \n\
<Btn1Up>:       extend-end(PRIMARY, CUT_BUFFER0) \n\
<Btn2Down>:	Stub() \n\
<Btn3Down>:     extend-start() \n\
<Btn3Motion>:   extend-adjust() \n\
<Btn3Up>:       extend-end(PRIMARY, CUT_BUFFER0) \n\
<Key>Return:	Update() \n\
<Key>Right:	forward-character() \n\
<Key>Left:	backward-character() \n\
<Key>Down:	next-line() \n\
Shift<Key>Up:	FetchIfNecessary(Up,5) previous-line() \n\
<Key>Up:	FetchIfNecessary(Up,1) previous-line() \n\
Ctrl<Key>r:     search(backward) \n\
Ctrl<Key>s:     search(forward) \n\
<Key>:		Stub()

*pane.bottext.preferredPaneSize:	250
*pane.bottext.scrollVertical:		always
*pane.bottext.allowResize:		True
*pane.bottext.scrollHorizontal:		never
*pane.bottext.wrap:			line
*enterpopup*bodytext.autoFill: 		on


*pane.label.label:			(no current meeting)
*pane.label.showGrip:			True
*pane.label.allowResize:		True

*pane.botbox.showGrip:			True
*pane.botbox.allowResize:		False


*enterpopup.pane.desctext.showGrip:		False
*enterpopup.pane.topbox.label.label:            Subject:
*enterpopup.pane.topbox.label.borderWidth:      0
*enterpopup.pane.bodytext.scrollHorizontal:	whenNeeded
*enterpopup.pane.bodytext.scrollVertical:       always
*enterpopup.pane.bodytext.height:               150
*enterpopup*Text.displayCaret:			off
*enterpopup*subjecttext.translations: \
#override \n\
Ctrl<Key>Return:	TriggerSend(Go) \n\
<Key>Return:		TriggerFocusMove(Next) \n\
<Key>Escape:		TriggerSend(Cancel) \n\
<Btn1Down>:		TriggerFocusMove(Here) \n\
<MapNotify>:		TriggerFocusMove(Here) \n\
<FocusIn>:		display-caret(on) \n\
<FocusOut>:		display-caret(off)

*enterpopup*bodytext.translations: \
#override \n\
Shift<Key>Return:	TriggerFocusMove(Prev) \n\
Ctrl<Key>Return:	TriggerSend(Go) \n\
<Key>Escape:		TriggerSend(Cancel) \n\
<Btn1Down>:		TriggerFocusMove(Here) \n\
<FocusIn>:		display-caret(on) \n\
<FocusOut>:		display-caret(off)

*enterpopup.pane.botbox.send.label:             Send
*enterpopup.pane.botbox.abort.label:            Abort
*enterpopup.pane.botbox.skipAdjust:		True
*enterpopup.pane.botbox.showGrip:		False

*writepopup.pane.label.label:		Write transaction to file:
*writepopup.pane.label.showGrip:	False
*writepopup.pane.box1.write.label:	Write
*writepopup.pane.box1.abort.label:	Abort
*writepopup.pane.text.showGrip:		False
*writepopup*text.translations: \
#override \n\
<Key>Return:		TriggerWrite(Go) \n\
<Key>Escape:		TriggerWrite(Cancel) \n\
<MapNotify>:		TriggerFocusMove(Here) \n\
<Btn1Down>:		TriggerFocusMove(Here)

*numpopup.pane.label.label:		Go to transaction number:
*numpopup.pane.label.showGrip:		False
*numpopup.pane.box1.goto.label:		Go To
*numpopup.pane.box1.abort.label:	Abort
*numpopup.pane.text.showGrip:		False
*numpopup*text.translations: \
#override \n\
<Key>Escape:		TriggerNum(Cancel) \n\
<Key>Return:		TriggerNum(Go) \n\
<MapNotify>:		TriggerFocusMove(Here) \n\
<Btn1Down>:		TriggerFocusMove(Here)

*helppopup.pane.box.okay.label:		dismiss
*helppopup.pane.helptext.height:	500
*helppopup.pane.helptext.allowResize:	True
*helppopup*string: \
\n\
                      What the buttons mean:\n\
---------------------------------------------------------------------\n\
  Down          Enter the next meeting with unread transactions\n\
  Up            Enter the previous meeting with unread transactions\n\
  update        Check for new transactions\n\
  configure     Change the list of meetings you attend\n\
  mode          Choose between listing meetings or transactions\n\
  show          Choose how many transactions should be listed\n\
  HELP          Display this screen\n\
  QUIT          Quit\n\
\n\
  <downarrow>   Move cursor to the next line\n\
  <uparrow>     Move cursor to the previous line\n\
  <return>      Read the meeting or transaction the cursor is on\n\
---------------------------------------------------------------------\n\
  next          Read the next transaction in the current meeting\n\
  prev          Read the previous transaction in the current meeting\n\
  Next in chain Read the next transaction in this chain\n\
  Prev in chain Read the previous transaction in this chain\n\
  goto          Choose a specific transaction to read\n\
  enter         Enter a new transaction or reply to the current one\n\
  write         Save the current transaction to a file or mail it\n\
\n\
  <spacebar>    'do the right thing'\n\
  <backspace>   reverse what space did\n\
---------------------------------------------------------------------\n\
You can also enter a meeting by doubleclicking on its title.\n\
\n\
The keyboard equivalent for clicking on a button is always the first\n\
character on the button.\n\
\n\
If a button is grayed out, this action is not possible at this time.\n\
For example, the 'enter' button will gray out when you do not have\n\
permission to enter transactions in a meeting.


*addpopup.pane.width:			600
*addpopup.pane.label.label:		Adding a meeting
*addpopup.pane.label.showGrip:		False
*addpopup.pane.box1.label.label:	Host:
*addpopup.pane.box1.label.borderWidth:	0
*addpopup.pane.box1.showGrip:		False
*addpopup.pane.box2.label.label:	Pathname:
*addpopup.pane.box2.label.borderWidth:	0
*addpopup.pane.box2.showGrip:		False
*addpopup.pane.box3.add.label:		Add
*addpopup.pane.box3.abort.label:	Abort
*addpopup.pane.box3.allowResize:	False
*addpopup*Text.displayCaret:		off
*addpopup*hosttext.translations: \
#override \n\
<Key>Escape:            TriggerAdd(Cancel) \n\
Ctrl<Key>Return:        TriggerAdd(Go) \n\
<Key>Return:		TriggerFocusMove(Next) \n\
<FocusIn>:		display-caret(on) \n\
<FocusOut>:		display-caret(off) \n\
<Enter>:		Stub() \n\
<Leave>:		Stub() \n\
<MapNotify>:		TriggerFocusMove(Here) \n\
<Btn1Down>:		TriggerFocusMove(Here)

*addpopup*pathtext.translations: \
#override \n\
<Key>Escape:            TriggerAdd(Cancel) \n\
Ctrl<Key>Return:        TriggerAdd(Go) \n\
<Key>Return:		TriggerFocusMove(Next) \n\
<FocusIn>:		display-caret(on) \n\
<FocusOut>:		display-caret(off) \n\
<Enter>:		Stub() \n\
<Leave>:		Stub() \n\
<Btn1Down>:		TriggerFocusMove(Here)

*deletepopup.pane.width:			600
*deletepopup.pane.label.label:			Deleting a meeting
*deletepopup.pane.label.showGrip:		False
*deletepopup.pane.box1.label.label:		Meeting Name:
*deletepopup.pane.box1.showGrip:		False
*deletepopup.pane.box1.label.borderWidth:	0
*deletepopup.pane.box2.delete.label:		Delete
*deletepopup.pane.box2.abort.label:		Abort
*deletepopup.pane.box2.showGrip:		False
*deletepopup.pane.box2.width:			300
*deletepopup*text.translations: \
#override \n\
<Key>Escape:		TriggerDelete(Cancel) \n\
<Key>Return:		TriggerDelete(Go) \n\
<MapNotify>:		TriggerFocusMove(Here) \n\
<Btn1Down>:		TriggerFocusMove(Here)

*configurebutton.leftBitmap: menu12
*modebutton.leftBitmap: menu12
*showbutton.leftBitmap: menu12
*gotobutton.leftBitmap: menu12
*enterbutton.leftBitmap: menu12
*botbox.writebutton.leftBitmap: menu12

*warningpopup.pane.box.acknowledge.label:	dismiss
*warningpopup.pane.label1.showGrip:		False
*warningpopup.pane.label2.showGrip:		False
*warningpopup.pane.box.showGrip:		False

*pane.accelerators: \
#override \n\
Shift<Key>N:	KeyCallback(nchainbutton) \n\
Shift<Key>P:	KeyCallback(pchainbutton) \n\
!<Key>n:	KeyCallback(nextbutton) \n\
!<Key>p:	KeyCallback(prevbutton) \n\
<Key>space:	DoTheRightThing() \n\
<Key>Delete:	DoTheRightThingInReverse() \n\
Shift<Key>D:	KeyCallback(downbutton) \n\
Shift<Key>U:	KeyCallback(upbutton) \n\
<Key>u:         KeyCallback(updatebutton) \n\
Shift<Key>H:    KeyCallback(helpbutton) \n\
Shift<Key>Q:    KeyCallback(quitbutton) \n\
<Key>c:		KeyCallback(configurebutton) \n\
<Key>m:		KeyCallback(modebutton) \n\
!<Key>s:	KeyCallback(showbutton) \n\
<Key>g:		KeyCallback(gotobutton) \n\
<Key>e:		KeyCallback(enterbutton) \n\
<Key>w:		KeyCallback(writebutton) \n\
<Key>d:		PopdownCB() \n\
~Ctrl<Key>h:	HelpCB()

*configure.translations: \
#override \n\
<Key>a: MenuCallback(configurebutton, addbutton) \n\
<Key>d: MenuCallback(configurebutton, deletebutton) \n\
<Key>: MenuCallback(abort) \n\

*mode.translations: \
#override \n\
<Key>t: MenuCallback(modebutton, transbutton) \n\
<Key>m: MenuCallback(modebutton, meetingbutton) \n\
<Key>: MenuCallback(abort) \n\

*show.translations: \
#override \n\
<Key>u: MenuCallback(showbutton, unreadbutton) \n\
<Key>a: MenuCallback(showbutton, allbutton) \n\
<Key>b: MenuCallback(showbutton, backbutton) \n\
<Key>: MenuCallback(abort) \n\

*goto.translations: \
#override \n\
<Key>n: MenuCallback(gotobutton, numberbutton) \n\
<Key>f: MenuCallback(gotobutton, firstbutton) \n\
<Key>l: MenuCallback(gotobutton, lastbutton) \n\
<Key>: MenuCallback(abort) \n\

*enter.translations: \
#override \n\
<Key>r: MenuCallback(enterbutton, replybutton) \n\
<Key>n: MenuCallback(enterbutton, newbutton) \n\
<Key>: MenuCallback(abort) \n\

*write.translations: \
#override \n\
<Key>w: MenuCallback(writebutton, writebutton) \n\
<Key>m: MenuCallback(writebutton, mailbutton) \n\
<Key>: MenuCallback(abort) \n\

*warningpopup*translations: \
#override \n\
<MapNotify>:	TriggerFocusMove(Here) \n\
<Key>d:		TriggerPopdown(Go) \n\
<Key>Return:	TriggerPopdown(Go) \n\
<Key>space:	TriggerPopdown(Go) \n\

*helppopup*translations: \
#override \n\
<MapNotify>:	TriggerFocusMove(Here) \n\
<Key>d:		TriggerPopdown(Go) \n\
<Key>Return:	TriggerPopdown(Go) \n\
<Btn2Down>:	Stub() \n\
<Key>:		Stub()

